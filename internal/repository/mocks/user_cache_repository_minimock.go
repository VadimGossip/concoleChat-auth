// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/VadimGossip/concoleChat-auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserCacheRepositoryMock implements repository.UserCacheRepository
type UserCacheRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDelete          func(ctx context.Context, ID int64) (err error)
	inspectFuncDelete   func(ctx context.Context, ID int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mUserCacheRepositoryMockDelete

	funcGet          func(ctx context.Context, ID int64) (up1 *model.User, err error)
	inspectFuncGet   func(ctx context.Context, ID int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mUserCacheRepositoryMockGet

	funcSet          func(ctx context.Context, user *model.User, expire time.Duration) (err error)
	inspectFuncSet   func(ctx context.Context, user *model.User, expire time.Duration)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mUserCacheRepositoryMockSet
}

// NewUserCacheRepositoryMock returns a mock for repository.UserCacheRepository
func NewUserCacheRepositoryMock(t minimock.Tester) *UserCacheRepositoryMock {
	m := &UserCacheRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMock = mUserCacheRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*UserCacheRepositoryMockDeleteParams{}

	m.GetMock = mUserCacheRepositoryMockGet{mock: m}
	m.GetMock.callArgs = []*UserCacheRepositoryMockGetParams{}

	m.SetMock = mUserCacheRepositoryMockSet{mock: m}
	m.SetMock.callArgs = []*UserCacheRepositoryMockSetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserCacheRepositoryMockDelete struct {
	optional           bool
	mock               *UserCacheRepositoryMock
	defaultExpectation *UserCacheRepositoryMockDeleteExpectation
	expectations       []*UserCacheRepositoryMockDeleteExpectation

	callArgs []*UserCacheRepositoryMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheRepositoryMockDeleteExpectation specifies expectation struct of the UserCacheRepository.Delete
type UserCacheRepositoryMockDeleteExpectation struct {
	mock      *UserCacheRepositoryMock
	params    *UserCacheRepositoryMockDeleteParams
	paramPtrs *UserCacheRepositoryMockDeleteParamPtrs
	results   *UserCacheRepositoryMockDeleteResults
	Counter   uint64
}

// UserCacheRepositoryMockDeleteParams contains parameters of the UserCacheRepository.Delete
type UserCacheRepositoryMockDeleteParams struct {
	ctx context.Context
	ID  int64
}

// UserCacheRepositoryMockDeleteParamPtrs contains pointers to parameters of the UserCacheRepository.Delete
type UserCacheRepositoryMockDeleteParamPtrs struct {
	ctx *context.Context
	ID  *int64
}

// UserCacheRepositoryMockDeleteResults contains results of the UserCacheRepository.Delete
type UserCacheRepositoryMockDeleteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mUserCacheRepositoryMockDelete) Optional() *mUserCacheRepositoryMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for UserCacheRepository.Delete
func (mmDelete *mUserCacheRepositoryMockDelete) Expect(ctx context.Context, ID int64) *mUserCacheRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &UserCacheRepositoryMockDeleteParams{ctx, ID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheRepository.Delete
func (mmDelete *mUserCacheRepositoryMockDelete) ExpectCtxParam1(ctx context.Context) *mUserCacheRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &UserCacheRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDelete
}

// ExpectIDParam2 sets up expected param ID for UserCacheRepository.Delete
func (mmDelete *mUserCacheRepositoryMockDelete) ExpectIDParam2(ID int64) *mUserCacheRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheRepositoryMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &UserCacheRepositoryMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ID = &ID

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the UserCacheRepository.Delete
func (mmDelete *mUserCacheRepositoryMockDelete) Inspect(f func(ctx context.Context, ID int64)) *mUserCacheRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for UserCacheRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by UserCacheRepository.Delete
func (mmDelete *mUserCacheRepositoryMockDelete) Return(err error) *UserCacheRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &UserCacheRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the UserCacheRepository.Delete method
func (mmDelete *mUserCacheRepositoryMockDelete) Set(f func(ctx context.Context, ID int64) (err error)) *UserCacheRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the UserCacheRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the UserCacheRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the UserCacheRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mUserCacheRepositoryMockDelete) When(ctx context.Context, ID int64) *UserCacheRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &UserCacheRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &UserCacheRepositoryMockDeleteParams{ctx, ID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up UserCacheRepository.Delete return parameters for the expectation previously defined by the When method
func (e *UserCacheRepositoryMockDeleteExpectation) Then(err error) *UserCacheRepositoryMock {
	e.results = &UserCacheRepositoryMockDeleteResults{err}
	return e.mock
}

// Times sets number of times UserCacheRepository.Delete should be invoked
func (mmDelete *mUserCacheRepositoryMockDelete) Times(n uint64) *mUserCacheRepositoryMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of UserCacheRepositoryMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	return mmDelete
}

func (mmDelete *mUserCacheRepositoryMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements repository.UserCacheRepository
func (mmDelete *UserCacheRepositoryMock) Delete(ctx context.Context, ID int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, ID)
	}

	mm_params := UserCacheRepositoryMockDeleteParams{ctx, ID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := UserCacheRepositoryMockDeleteParams{ctx, ID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("UserCacheRepositoryMock.Delete got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ID != nil && !minimock.Equal(*mm_want_ptrs.ID, mm_got.ID) {
				mmDelete.t.Errorf("UserCacheRepositoryMock.Delete got unexpected parameter ID, want: %#v, got: %#v%s\n", *mm_want_ptrs.ID, mm_got.ID, minimock.Diff(*mm_want_ptrs.ID, mm_got.ID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("UserCacheRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the UserCacheRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, ID)
	}
	mmDelete.t.Fatalf("Unexpected call to UserCacheRepositoryMock.Delete. %v %v", ctx, ID)
	return
}

// DeleteAfterCounter returns a count of finished UserCacheRepositoryMock.Delete invocations
func (mmDelete *UserCacheRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of UserCacheRepositoryMock.Delete invocations
func (mmDelete *UserCacheRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to UserCacheRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mUserCacheRepositoryMockDelete) Calls() []*UserCacheRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*UserCacheRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *UserCacheRepositoryMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *UserCacheRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Error("Expected call to UserCacheRepositoryMock.Delete")
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheRepositoryMock.Delete but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), afterDeleteCounter)
	}
}

type mUserCacheRepositoryMockGet struct {
	optional           bool
	mock               *UserCacheRepositoryMock
	defaultExpectation *UserCacheRepositoryMockGetExpectation
	expectations       []*UserCacheRepositoryMockGetExpectation

	callArgs []*UserCacheRepositoryMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheRepositoryMockGetExpectation specifies expectation struct of the UserCacheRepository.Get
type UserCacheRepositoryMockGetExpectation struct {
	mock      *UserCacheRepositoryMock
	params    *UserCacheRepositoryMockGetParams
	paramPtrs *UserCacheRepositoryMockGetParamPtrs
	results   *UserCacheRepositoryMockGetResults
	Counter   uint64
}

// UserCacheRepositoryMockGetParams contains parameters of the UserCacheRepository.Get
type UserCacheRepositoryMockGetParams struct {
	ctx context.Context
	ID  int64
}

// UserCacheRepositoryMockGetParamPtrs contains pointers to parameters of the UserCacheRepository.Get
type UserCacheRepositoryMockGetParamPtrs struct {
	ctx *context.Context
	ID  *int64
}

// UserCacheRepositoryMockGetResults contains results of the UserCacheRepository.Get
type UserCacheRepositoryMockGetResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mUserCacheRepositoryMockGet) Optional() *mUserCacheRepositoryMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for UserCacheRepository.Get
func (mmGet *mUserCacheRepositoryMockGet) Expect(ctx context.Context, ID int64) *mUserCacheRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &UserCacheRepositoryMockGetParams{ctx, ID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheRepository.Get
func (mmGet *mUserCacheRepositoryMockGet) ExpectCtxParam1(ctx context.Context) *mUserCacheRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &UserCacheRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectIDParam2 sets up expected param ID for UserCacheRepository.Get
func (mmGet *mUserCacheRepositoryMockGet) ExpectIDParam2(ID int64) *mUserCacheRepositoryMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheRepositoryMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &UserCacheRepositoryMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ID = &ID

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the UserCacheRepository.Get
func (mmGet *mUserCacheRepositoryMockGet) Inspect(f func(ctx context.Context, ID int64)) *mUserCacheRepositoryMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for UserCacheRepositoryMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by UserCacheRepository.Get
func (mmGet *mUserCacheRepositoryMockGet) Return(up1 *model.User, err error) *UserCacheRepositoryMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheRepositoryMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &UserCacheRepositoryMockGetResults{up1, err}
	return mmGet.mock
}

// Set uses given function f to mock the UserCacheRepository.Get method
func (mmGet *mUserCacheRepositoryMockGet) Set(f func(ctx context.Context, ID int64) (up1 *model.User, err error)) *UserCacheRepositoryMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the UserCacheRepository.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the UserCacheRepository.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the UserCacheRepository.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mUserCacheRepositoryMockGet) When(ctx context.Context, ID int64) *UserCacheRepositoryMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheRepositoryMock.Get mock is already set by Set")
	}

	expectation := &UserCacheRepositoryMockGetExpectation{
		mock:   mmGet.mock,
		params: &UserCacheRepositoryMockGetParams{ctx, ID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up UserCacheRepository.Get return parameters for the expectation previously defined by the When method
func (e *UserCacheRepositoryMockGetExpectation) Then(up1 *model.User, err error) *UserCacheRepositoryMock {
	e.results = &UserCacheRepositoryMockGetResults{up1, err}
	return e.mock
}

// Times sets number of times UserCacheRepository.Get should be invoked
func (mmGet *mUserCacheRepositoryMockGet) Times(n uint64) *mUserCacheRepositoryMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of UserCacheRepositoryMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mUserCacheRepositoryMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements repository.UserCacheRepository
func (mmGet *UserCacheRepositoryMock) Get(ctx context.Context, ID int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, ID)
	}

	mm_params := UserCacheRepositoryMockGetParams{ctx, ID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := UserCacheRepositoryMockGetParams{ctx, ID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("UserCacheRepositoryMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ID != nil && !minimock.Equal(*mm_want_ptrs.ID, mm_got.ID) {
				mmGet.t.Errorf("UserCacheRepositoryMock.Get got unexpected parameter ID, want: %#v, got: %#v%s\n", *mm_want_ptrs.ID, mm_got.ID, minimock.Diff(*mm_want_ptrs.ID, mm_got.ID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("UserCacheRepositoryMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the UserCacheRepositoryMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, ID)
	}
	mmGet.t.Fatalf("Unexpected call to UserCacheRepositoryMock.Get. %v %v", ctx, ID)
	return
}

// GetAfterCounter returns a count of finished UserCacheRepositoryMock.Get invocations
func (mmGet *UserCacheRepositoryMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of UserCacheRepositoryMock.Get invocations
func (mmGet *UserCacheRepositoryMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to UserCacheRepositoryMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mUserCacheRepositoryMockGet) Calls() []*UserCacheRepositoryMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*UserCacheRepositoryMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *UserCacheRepositoryMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *UserCacheRepositoryMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheRepositoryMock.Get")
		} else {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to UserCacheRepositoryMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheRepositoryMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

type mUserCacheRepositoryMockSet struct {
	optional           bool
	mock               *UserCacheRepositoryMock
	defaultExpectation *UserCacheRepositoryMockSetExpectation
	expectations       []*UserCacheRepositoryMockSetExpectation

	callArgs []*UserCacheRepositoryMockSetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheRepositoryMockSetExpectation specifies expectation struct of the UserCacheRepository.Set
type UserCacheRepositoryMockSetExpectation struct {
	mock      *UserCacheRepositoryMock
	params    *UserCacheRepositoryMockSetParams
	paramPtrs *UserCacheRepositoryMockSetParamPtrs
	results   *UserCacheRepositoryMockSetResults
	Counter   uint64
}

// UserCacheRepositoryMockSetParams contains parameters of the UserCacheRepository.Set
type UserCacheRepositoryMockSetParams struct {
	ctx    context.Context
	user   *model.User
	expire time.Duration
}

// UserCacheRepositoryMockSetParamPtrs contains pointers to parameters of the UserCacheRepository.Set
type UserCacheRepositoryMockSetParamPtrs struct {
	ctx    *context.Context
	user   **model.User
	expire *time.Duration
}

// UserCacheRepositoryMockSetResults contains results of the UserCacheRepository.Set
type UserCacheRepositoryMockSetResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSet *mUserCacheRepositoryMockSet) Optional() *mUserCacheRepositoryMockSet {
	mmSet.optional = true
	return mmSet
}

// Expect sets up expected params for UserCacheRepository.Set
func (mmSet *mUserCacheRepositoryMockSet) Expect(ctx context.Context, user *model.User, expire time.Duration) *mUserCacheRepositoryMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheRepositoryMockSetExpectation{}
	}

	if mmSet.defaultExpectation.paramPtrs != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by ExpectParams functions")
	}

	mmSet.defaultExpectation.params = &UserCacheRepositoryMockSetParams{ctx, user, expire}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheRepository.Set
func (mmSet *mUserCacheRepositoryMockSet) ExpectCtxParam1(ctx context.Context) *mUserCacheRepositoryMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheRepositoryMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &UserCacheRepositoryMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSet
}

// ExpectUserParam2 sets up expected param user for UserCacheRepository.Set
func (mmSet *mUserCacheRepositoryMockSet) ExpectUserParam2(user *model.User) *mUserCacheRepositoryMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheRepositoryMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &UserCacheRepositoryMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.user = &user

	return mmSet
}

// ExpectExpireParam3 sets up expected param expire for UserCacheRepository.Set
func (mmSet *mUserCacheRepositoryMockSet) ExpectExpireParam3(expire time.Duration) *mUserCacheRepositoryMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheRepositoryMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &UserCacheRepositoryMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.expire = &expire

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the UserCacheRepository.Set
func (mmSet *mUserCacheRepositoryMockSet) Inspect(f func(ctx context.Context, user *model.User, expire time.Duration)) *mUserCacheRepositoryMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for UserCacheRepositoryMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by UserCacheRepository.Set
func (mmSet *mUserCacheRepositoryMockSet) Return(err error) *UserCacheRepositoryMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheRepositoryMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &UserCacheRepositoryMockSetResults{err}
	return mmSet.mock
}

// Set uses given function f to mock the UserCacheRepository.Set method
func (mmSet *mUserCacheRepositoryMockSet) Set(f func(ctx context.Context, user *model.User, expire time.Duration) (err error)) *UserCacheRepositoryMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the UserCacheRepository.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the UserCacheRepository.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// When sets expectation for the UserCacheRepository.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mUserCacheRepositoryMockSet) When(ctx context.Context, user *model.User, expire time.Duration) *UserCacheRepositoryMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheRepositoryMock.Set mock is already set by Set")
	}

	expectation := &UserCacheRepositoryMockSetExpectation{
		mock:   mmSet.mock,
		params: &UserCacheRepositoryMockSetParams{ctx, user, expire},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up UserCacheRepository.Set return parameters for the expectation previously defined by the When method
func (e *UserCacheRepositoryMockSetExpectation) Then(err error) *UserCacheRepositoryMock {
	e.results = &UserCacheRepositoryMockSetResults{err}
	return e.mock
}

// Times sets number of times UserCacheRepository.Set should be invoked
func (mmSet *mUserCacheRepositoryMockSet) Times(n uint64) *mUserCacheRepositoryMockSet {
	if n == 0 {
		mmSet.mock.t.Fatalf("Times of UserCacheRepositoryMock.Set mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSet.expectedInvocations, n)
	return mmSet
}

func (mmSet *mUserCacheRepositoryMockSet) invocationsDone() bool {
	if len(mmSet.expectations) == 0 && mmSet.defaultExpectation == nil && mmSet.mock.funcSet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSet.mock.afterSetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Set implements repository.UserCacheRepository
func (mmSet *UserCacheRepositoryMock) Set(ctx context.Context, user *model.User, expire time.Duration) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, user, expire)
	}

	mm_params := UserCacheRepositoryMockSetParams{ctx, user, expire}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, &mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_want_ptrs := mmSet.SetMock.defaultExpectation.paramPtrs

		mm_got := UserCacheRepositoryMockSetParams{ctx, user, expire}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSet.t.Errorf("UserCacheRepositoryMock.Set got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmSet.t.Errorf("UserCacheRepositoryMock.Set got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

			if mm_want_ptrs.expire != nil && !minimock.Equal(*mm_want_ptrs.expire, mm_got.expire) {
				mmSet.t.Errorf("UserCacheRepositoryMock.Set got unexpected parameter expire, want: %#v, got: %#v%s\n", *mm_want_ptrs.expire, mm_got.expire, minimock.Diff(*mm_want_ptrs.expire, mm_got.expire))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("UserCacheRepositoryMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the UserCacheRepositoryMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, user, expire)
	}
	mmSet.t.Fatalf("Unexpected call to UserCacheRepositoryMock.Set. %v %v %v", ctx, user, expire)
	return
}

// SetAfterCounter returns a count of finished UserCacheRepositoryMock.Set invocations
func (mmSet *UserCacheRepositoryMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of UserCacheRepositoryMock.Set invocations
func (mmSet *UserCacheRepositoryMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to UserCacheRepositoryMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mUserCacheRepositoryMockSet) Calls() []*UserCacheRepositoryMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*UserCacheRepositoryMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *UserCacheRepositoryMock) MinimockSetDone() bool {
	if m.SetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetMock.invocationsDone()
}

// MinimockSetInspect logs each unmet expectation
func (m *UserCacheRepositoryMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.Set with params: %#v", *e.params)
		}
	}

	afterSetCounter := mm_atomic.LoadUint64(&m.afterSetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && afterSetCounter < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheRepositoryMock.Set")
		} else {
			m.t.Errorf("Expected call to UserCacheRepositoryMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && afterSetCounter < 1 {
		m.t.Error("Expected call to UserCacheRepositoryMock.Set")
	}

	if !m.SetMock.invocationsDone() && afterSetCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheRepositoryMock.Set but found %d calls",
			mm_atomic.LoadUint64(&m.SetMock.expectedInvocations), afterSetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCacheRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockSetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCacheRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCacheRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockSetDone()
}
