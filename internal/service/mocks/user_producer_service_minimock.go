// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/VadimGossip/concoleChat-auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserProducerServiceMock implements service.UserProducerService
type UserProducerServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcProduceCreate          func(info *model.UserInfo) (err error)
	inspectFuncProduceCreate   func(info *model.UserInfo)
	afterProduceCreateCounter  uint64
	beforeProduceCreateCounter uint64
	ProduceCreateMock          mUserProducerServiceMockProduceCreate
}

// NewUserProducerServiceMock returns a mock for service.UserProducerService
func NewUserProducerServiceMock(t minimock.Tester) *UserProducerServiceMock {
	m := &UserProducerServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ProduceCreateMock = mUserProducerServiceMockProduceCreate{mock: m}
	m.ProduceCreateMock.callArgs = []*UserProducerServiceMockProduceCreateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserProducerServiceMockProduceCreate struct {
	optional           bool
	mock               *UserProducerServiceMock
	defaultExpectation *UserProducerServiceMockProduceCreateExpectation
	expectations       []*UserProducerServiceMockProduceCreateExpectation

	callArgs []*UserProducerServiceMockProduceCreateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserProducerServiceMockProduceCreateExpectation specifies expectation struct of the UserProducerService.ProduceCreate
type UserProducerServiceMockProduceCreateExpectation struct {
	mock      *UserProducerServiceMock
	params    *UserProducerServiceMockProduceCreateParams
	paramPtrs *UserProducerServiceMockProduceCreateParamPtrs
	results   *UserProducerServiceMockProduceCreateResults
	Counter   uint64
}

// UserProducerServiceMockProduceCreateParams contains parameters of the UserProducerService.ProduceCreate
type UserProducerServiceMockProduceCreateParams struct {
	info *model.UserInfo
}

// UserProducerServiceMockProduceCreateParamPtrs contains pointers to parameters of the UserProducerService.ProduceCreate
type UserProducerServiceMockProduceCreateParamPtrs struct {
	info **model.UserInfo
}

// UserProducerServiceMockProduceCreateResults contains results of the UserProducerService.ProduceCreate
type UserProducerServiceMockProduceCreateResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Optional() *mUserProducerServiceMockProduceCreate {
	mmProduceCreate.optional = true
	return mmProduceCreate
}

// Expect sets up expected params for UserProducerService.ProduceCreate
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Expect(info *model.UserInfo) *mUserProducerServiceMockProduceCreate {
	if mmProduceCreate.mock.funcProduceCreate != nil {
		mmProduceCreate.mock.t.Fatalf("UserProducerServiceMock.ProduceCreate mock is already set by Set")
	}

	if mmProduceCreate.defaultExpectation == nil {
		mmProduceCreate.defaultExpectation = &UserProducerServiceMockProduceCreateExpectation{}
	}

	if mmProduceCreate.defaultExpectation.paramPtrs != nil {
		mmProduceCreate.mock.t.Fatalf("UserProducerServiceMock.ProduceCreate mock is already set by ExpectParams functions")
	}

	mmProduceCreate.defaultExpectation.params = &UserProducerServiceMockProduceCreateParams{info}
	for _, e := range mmProduceCreate.expectations {
		if minimock.Equal(e.params, mmProduceCreate.defaultExpectation.params) {
			mmProduceCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmProduceCreate.defaultExpectation.params)
		}
	}

	return mmProduceCreate
}

// ExpectInfoParam1 sets up expected param info for UserProducerService.ProduceCreate
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) ExpectInfoParam1(info *model.UserInfo) *mUserProducerServiceMockProduceCreate {
	if mmProduceCreate.mock.funcProduceCreate != nil {
		mmProduceCreate.mock.t.Fatalf("UserProducerServiceMock.ProduceCreate mock is already set by Set")
	}

	if mmProduceCreate.defaultExpectation == nil {
		mmProduceCreate.defaultExpectation = &UserProducerServiceMockProduceCreateExpectation{}
	}

	if mmProduceCreate.defaultExpectation.params != nil {
		mmProduceCreate.mock.t.Fatalf("UserProducerServiceMock.ProduceCreate mock is already set by Expect")
	}

	if mmProduceCreate.defaultExpectation.paramPtrs == nil {
		mmProduceCreate.defaultExpectation.paramPtrs = &UserProducerServiceMockProduceCreateParamPtrs{}
	}
	mmProduceCreate.defaultExpectation.paramPtrs.info = &info

	return mmProduceCreate
}

// Inspect accepts an inspector function that has same arguments as the UserProducerService.ProduceCreate
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Inspect(f func(info *model.UserInfo)) *mUserProducerServiceMockProduceCreate {
	if mmProduceCreate.mock.inspectFuncProduceCreate != nil {
		mmProduceCreate.mock.t.Fatalf("Inspect function is already set for UserProducerServiceMock.ProduceCreate")
	}

	mmProduceCreate.mock.inspectFuncProduceCreate = f

	return mmProduceCreate
}

// Return sets up results that will be returned by UserProducerService.ProduceCreate
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Return(err error) *UserProducerServiceMock {
	if mmProduceCreate.mock.funcProduceCreate != nil {
		mmProduceCreate.mock.t.Fatalf("UserProducerServiceMock.ProduceCreate mock is already set by Set")
	}

	if mmProduceCreate.defaultExpectation == nil {
		mmProduceCreate.defaultExpectation = &UserProducerServiceMockProduceCreateExpectation{mock: mmProduceCreate.mock}
	}
	mmProduceCreate.defaultExpectation.results = &UserProducerServiceMockProduceCreateResults{err}
	return mmProduceCreate.mock
}

// Set uses given function f to mock the UserProducerService.ProduceCreate method
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Set(f func(info *model.UserInfo) (err error)) *UserProducerServiceMock {
	if mmProduceCreate.defaultExpectation != nil {
		mmProduceCreate.mock.t.Fatalf("Default expectation is already set for the UserProducerService.ProduceCreate method")
	}

	if len(mmProduceCreate.expectations) > 0 {
		mmProduceCreate.mock.t.Fatalf("Some expectations are already set for the UserProducerService.ProduceCreate method")
	}

	mmProduceCreate.mock.funcProduceCreate = f
	return mmProduceCreate.mock
}

// When sets expectation for the UserProducerService.ProduceCreate which will trigger the result defined by the following
// Then helper
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) When(info *model.UserInfo) *UserProducerServiceMockProduceCreateExpectation {
	if mmProduceCreate.mock.funcProduceCreate != nil {
		mmProduceCreate.mock.t.Fatalf("UserProducerServiceMock.ProduceCreate mock is already set by Set")
	}

	expectation := &UserProducerServiceMockProduceCreateExpectation{
		mock:   mmProduceCreate.mock,
		params: &UserProducerServiceMockProduceCreateParams{info},
	}
	mmProduceCreate.expectations = append(mmProduceCreate.expectations, expectation)
	return expectation
}

// Then sets up UserProducerService.ProduceCreate return parameters for the expectation previously defined by the When method
func (e *UserProducerServiceMockProduceCreateExpectation) Then(err error) *UserProducerServiceMock {
	e.results = &UserProducerServiceMockProduceCreateResults{err}
	return e.mock
}

// Times sets number of times UserProducerService.ProduceCreate should be invoked
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Times(n uint64) *mUserProducerServiceMockProduceCreate {
	if n == 0 {
		mmProduceCreate.mock.t.Fatalf("Times of UserProducerServiceMock.ProduceCreate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmProduceCreate.expectedInvocations, n)
	return mmProduceCreate
}

func (mmProduceCreate *mUserProducerServiceMockProduceCreate) invocationsDone() bool {
	if len(mmProduceCreate.expectations) == 0 && mmProduceCreate.defaultExpectation == nil && mmProduceCreate.mock.funcProduceCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmProduceCreate.mock.afterProduceCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmProduceCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// ProduceCreate implements service.UserProducerService
func (mmProduceCreate *UserProducerServiceMock) ProduceCreate(info *model.UserInfo) (err error) {
	mm_atomic.AddUint64(&mmProduceCreate.beforeProduceCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmProduceCreate.afterProduceCreateCounter, 1)

	if mmProduceCreate.inspectFuncProduceCreate != nil {
		mmProduceCreate.inspectFuncProduceCreate(info)
	}

	mm_params := UserProducerServiceMockProduceCreateParams{info}

	// Record call args
	mmProduceCreate.ProduceCreateMock.mutex.Lock()
	mmProduceCreate.ProduceCreateMock.callArgs = append(mmProduceCreate.ProduceCreateMock.callArgs, &mm_params)
	mmProduceCreate.ProduceCreateMock.mutex.Unlock()

	for _, e := range mmProduceCreate.ProduceCreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmProduceCreate.ProduceCreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmProduceCreate.ProduceCreateMock.defaultExpectation.Counter, 1)
		mm_want := mmProduceCreate.ProduceCreateMock.defaultExpectation.params
		mm_want_ptrs := mmProduceCreate.ProduceCreateMock.defaultExpectation.paramPtrs

		mm_got := UserProducerServiceMockProduceCreateParams{info}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.info != nil && !minimock.Equal(*mm_want_ptrs.info, mm_got.info) {
				mmProduceCreate.t.Errorf("UserProducerServiceMock.ProduceCreate got unexpected parameter info, want: %#v, got: %#v%s\n", *mm_want_ptrs.info, mm_got.info, minimock.Diff(*mm_want_ptrs.info, mm_got.info))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmProduceCreate.t.Errorf("UserProducerServiceMock.ProduceCreate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmProduceCreate.ProduceCreateMock.defaultExpectation.results
		if mm_results == nil {
			mmProduceCreate.t.Fatal("No results are set for the UserProducerServiceMock.ProduceCreate")
		}
		return (*mm_results).err
	}
	if mmProduceCreate.funcProduceCreate != nil {
		return mmProduceCreate.funcProduceCreate(info)
	}
	mmProduceCreate.t.Fatalf("Unexpected call to UserProducerServiceMock.ProduceCreate. %v", info)
	return
}

// ProduceCreateAfterCounter returns a count of finished UserProducerServiceMock.ProduceCreate invocations
func (mmProduceCreate *UserProducerServiceMock) ProduceCreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceCreate.afterProduceCreateCounter)
}

// ProduceCreateBeforeCounter returns a count of UserProducerServiceMock.ProduceCreate invocations
func (mmProduceCreate *UserProducerServiceMock) ProduceCreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmProduceCreate.beforeProduceCreateCounter)
}

// Calls returns a list of arguments used in each call to UserProducerServiceMock.ProduceCreate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmProduceCreate *mUserProducerServiceMockProduceCreate) Calls() []*UserProducerServiceMockProduceCreateParams {
	mmProduceCreate.mutex.RLock()

	argCopy := make([]*UserProducerServiceMockProduceCreateParams, len(mmProduceCreate.callArgs))
	copy(argCopy, mmProduceCreate.callArgs)

	mmProduceCreate.mutex.RUnlock()

	return argCopy
}

// MinimockProduceCreateDone returns true if the count of the ProduceCreate invocations corresponds
// the number of defined expectations
func (m *UserProducerServiceMock) MinimockProduceCreateDone() bool {
	if m.ProduceCreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.ProduceCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.ProduceCreateMock.invocationsDone()
}

// MinimockProduceCreateInspect logs each unmet expectation
func (m *UserProducerServiceMock) MinimockProduceCreateInspect() {
	for _, e := range m.ProduceCreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserProducerServiceMock.ProduceCreate with params: %#v", *e.params)
		}
	}

	afterProduceCreateCounter := mm_atomic.LoadUint64(&m.afterProduceCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.ProduceCreateMock.defaultExpectation != nil && afterProduceCreateCounter < 1 {
		if m.ProduceCreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserProducerServiceMock.ProduceCreate")
		} else {
			m.t.Errorf("Expected call to UserProducerServiceMock.ProduceCreate with params: %#v", *m.ProduceCreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcProduceCreate != nil && afterProduceCreateCounter < 1 {
		m.t.Error("Expected call to UserProducerServiceMock.ProduceCreate")
	}

	if !m.ProduceCreateMock.invocationsDone() && afterProduceCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to UserProducerServiceMock.ProduceCreate but found %d calls",
			mm_atomic.LoadUint64(&m.ProduceCreateMock.expectedInvocations), afterProduceCreateCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserProducerServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockProduceCreateInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserProducerServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserProducerServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockProduceCreateDone()
}
