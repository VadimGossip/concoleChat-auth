// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/VadimGossip/concoleChat-auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// UserCacheServiceMock implements service.UserCacheService
type UserCacheServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDelete          func(ctx context.Context, ID int64) (err error)
	inspectFuncDelete   func(ctx context.Context, ID int64)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mUserCacheServiceMockDelete

	funcGet          func(ctx context.Context, ID int64) (up1 *model.User, err error)
	inspectFuncGet   func(ctx context.Context, ID int64)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mUserCacheServiceMockGet

	funcSet          func(ctx context.Context, user *model.User) (err error)
	inspectFuncSet   func(ctx context.Context, user *model.User)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mUserCacheServiceMockSet
}

// NewUserCacheServiceMock returns a mock for service.UserCacheService
func NewUserCacheServiceMock(t minimock.Tester) *UserCacheServiceMock {
	m := &UserCacheServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMock = mUserCacheServiceMockDelete{mock: m}
	m.DeleteMock.callArgs = []*UserCacheServiceMockDeleteParams{}

	m.GetMock = mUserCacheServiceMockGet{mock: m}
	m.GetMock.callArgs = []*UserCacheServiceMockGetParams{}

	m.SetMock = mUserCacheServiceMockSet{mock: m}
	m.SetMock.callArgs = []*UserCacheServiceMockSetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mUserCacheServiceMockDelete struct {
	optional           bool
	mock               *UserCacheServiceMock
	defaultExpectation *UserCacheServiceMockDeleteExpectation
	expectations       []*UserCacheServiceMockDeleteExpectation

	callArgs []*UserCacheServiceMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheServiceMockDeleteExpectation specifies expectation struct of the UserCacheService.Delete
type UserCacheServiceMockDeleteExpectation struct {
	mock      *UserCacheServiceMock
	params    *UserCacheServiceMockDeleteParams
	paramPtrs *UserCacheServiceMockDeleteParamPtrs
	results   *UserCacheServiceMockDeleteResults
	Counter   uint64
}

// UserCacheServiceMockDeleteParams contains parameters of the UserCacheService.Delete
type UserCacheServiceMockDeleteParams struct {
	ctx context.Context
	ID  int64
}

// UserCacheServiceMockDeleteParamPtrs contains pointers to parameters of the UserCacheService.Delete
type UserCacheServiceMockDeleteParamPtrs struct {
	ctx *context.Context
	ID  *int64
}

// UserCacheServiceMockDeleteResults contains results of the UserCacheService.Delete
type UserCacheServiceMockDeleteResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mUserCacheServiceMockDelete) Optional() *mUserCacheServiceMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for UserCacheService.Delete
func (mmDelete *mUserCacheServiceMockDelete) Expect(ctx context.Context, ID int64) *mUserCacheServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &UserCacheServiceMockDeleteParams{ctx, ID}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheService.Delete
func (mmDelete *mUserCacheServiceMockDelete) ExpectCtxParam1(ctx context.Context) *mUserCacheServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &UserCacheServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ctx = &ctx

	return mmDelete
}

// ExpectIDParam2 sets up expected param ID for UserCacheService.Delete
func (mmDelete *mUserCacheServiceMockDelete) ExpectIDParam2(ID int64) *mUserCacheServiceMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheServiceMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &UserCacheServiceMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.ID = &ID

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the UserCacheService.Delete
func (mmDelete *mUserCacheServiceMockDelete) Inspect(f func(ctx context.Context, ID int64)) *mUserCacheServiceMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for UserCacheServiceMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by UserCacheService.Delete
func (mmDelete *mUserCacheServiceMockDelete) Return(err error) *UserCacheServiceMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &UserCacheServiceMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &UserCacheServiceMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the UserCacheService.Delete method
func (mmDelete *mUserCacheServiceMockDelete) Set(f func(ctx context.Context, ID int64) (err error)) *UserCacheServiceMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the UserCacheService.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the UserCacheService.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the UserCacheService.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mUserCacheServiceMockDelete) When(ctx context.Context, ID int64) *UserCacheServiceMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("UserCacheServiceMock.Delete mock is already set by Set")
	}

	expectation := &UserCacheServiceMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &UserCacheServiceMockDeleteParams{ctx, ID},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up UserCacheService.Delete return parameters for the expectation previously defined by the When method
func (e *UserCacheServiceMockDeleteExpectation) Then(err error) *UserCacheServiceMock {
	e.results = &UserCacheServiceMockDeleteResults{err}
	return e.mock
}

// Times sets number of times UserCacheService.Delete should be invoked
func (mmDelete *mUserCacheServiceMockDelete) Times(n uint64) *mUserCacheServiceMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of UserCacheServiceMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	return mmDelete
}

func (mmDelete *mUserCacheServiceMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements service.UserCacheService
func (mmDelete *UserCacheServiceMock) Delete(ctx context.Context, ID int64) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, ID)
	}

	mm_params := UserCacheServiceMockDeleteParams{ctx, ID}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := UserCacheServiceMockDeleteParams{ctx, ID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmDelete.t.Errorf("UserCacheServiceMock.Delete got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ID != nil && !minimock.Equal(*mm_want_ptrs.ID, mm_got.ID) {
				mmDelete.t.Errorf("UserCacheServiceMock.Delete got unexpected parameter ID, want: %#v, got: %#v%s\n", *mm_want_ptrs.ID, mm_got.ID, minimock.Diff(*mm_want_ptrs.ID, mm_got.ID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("UserCacheServiceMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the UserCacheServiceMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, ID)
	}
	mmDelete.t.Fatalf("Unexpected call to UserCacheServiceMock.Delete. %v %v", ctx, ID)
	return
}

// DeleteAfterCounter returns a count of finished UserCacheServiceMock.Delete invocations
func (mmDelete *UserCacheServiceMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of UserCacheServiceMock.Delete invocations
func (mmDelete *UserCacheServiceMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to UserCacheServiceMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mUserCacheServiceMockDelete) Calls() []*UserCacheServiceMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*UserCacheServiceMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *UserCacheServiceMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *UserCacheServiceMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheServiceMock.Delete with params: %#v", *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheServiceMock.Delete")
		} else {
			m.t.Errorf("Expected call to UserCacheServiceMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Error("Expected call to UserCacheServiceMock.Delete")
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheServiceMock.Delete but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), afterDeleteCounter)
	}
}

type mUserCacheServiceMockGet struct {
	optional           bool
	mock               *UserCacheServiceMock
	defaultExpectation *UserCacheServiceMockGetExpectation
	expectations       []*UserCacheServiceMockGetExpectation

	callArgs []*UserCacheServiceMockGetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheServiceMockGetExpectation specifies expectation struct of the UserCacheService.Get
type UserCacheServiceMockGetExpectation struct {
	mock      *UserCacheServiceMock
	params    *UserCacheServiceMockGetParams
	paramPtrs *UserCacheServiceMockGetParamPtrs
	results   *UserCacheServiceMockGetResults
	Counter   uint64
}

// UserCacheServiceMockGetParams contains parameters of the UserCacheService.Get
type UserCacheServiceMockGetParams struct {
	ctx context.Context
	ID  int64
}

// UserCacheServiceMockGetParamPtrs contains pointers to parameters of the UserCacheService.Get
type UserCacheServiceMockGetParamPtrs struct {
	ctx *context.Context
	ID  *int64
}

// UserCacheServiceMockGetResults contains results of the UserCacheService.Get
type UserCacheServiceMockGetResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mUserCacheServiceMockGet) Optional() *mUserCacheServiceMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for UserCacheService.Get
func (mmGet *mUserCacheServiceMockGet) Expect(ctx context.Context, ID int64) *mUserCacheServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &UserCacheServiceMockGetParams{ctx, ID}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheService.Get
func (mmGet *mUserCacheServiceMockGet) ExpectCtxParam1(ctx context.Context) *mUserCacheServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &UserCacheServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGet
}

// ExpectIDParam2 sets up expected param ID for UserCacheService.Get
func (mmGet *mUserCacheServiceMockGet) ExpectIDParam2(ID int64) *mUserCacheServiceMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheServiceMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &UserCacheServiceMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.ID = &ID

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the UserCacheService.Get
func (mmGet *mUserCacheServiceMockGet) Inspect(f func(ctx context.Context, ID int64)) *mUserCacheServiceMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for UserCacheServiceMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by UserCacheService.Get
func (mmGet *mUserCacheServiceMockGet) Return(up1 *model.User, err error) *UserCacheServiceMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &UserCacheServiceMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &UserCacheServiceMockGetResults{up1, err}
	return mmGet.mock
}

// Set uses given function f to mock the UserCacheService.Get method
func (mmGet *mUserCacheServiceMockGet) Set(f func(ctx context.Context, ID int64) (up1 *model.User, err error)) *UserCacheServiceMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the UserCacheService.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the UserCacheService.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the UserCacheService.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mUserCacheServiceMockGet) When(ctx context.Context, ID int64) *UserCacheServiceMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("UserCacheServiceMock.Get mock is already set by Set")
	}

	expectation := &UserCacheServiceMockGetExpectation{
		mock:   mmGet.mock,
		params: &UserCacheServiceMockGetParams{ctx, ID},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up UserCacheService.Get return parameters for the expectation previously defined by the When method
func (e *UserCacheServiceMockGetExpectation) Then(up1 *model.User, err error) *UserCacheServiceMock {
	e.results = &UserCacheServiceMockGetResults{up1, err}
	return e.mock
}

// Times sets number of times UserCacheService.Get should be invoked
func (mmGet *mUserCacheServiceMockGet) Times(n uint64) *mUserCacheServiceMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of UserCacheServiceMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	return mmGet
}

func (mmGet *mUserCacheServiceMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements service.UserCacheService
func (mmGet *UserCacheServiceMock) Get(ctx context.Context, ID int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(ctx, ID)
	}

	mm_params := UserCacheServiceMockGetParams{ctx, ID}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := UserCacheServiceMockGetParams{ctx, ID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGet.t.Errorf("UserCacheServiceMock.Get got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.ID != nil && !minimock.Equal(*mm_want_ptrs.ID, mm_got.ID) {
				mmGet.t.Errorf("UserCacheServiceMock.Get got unexpected parameter ID, want: %#v, got: %#v%s\n", *mm_want_ptrs.ID, mm_got.ID, minimock.Diff(*mm_want_ptrs.ID, mm_got.ID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("UserCacheServiceMock.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the UserCacheServiceMock.Get")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(ctx, ID)
	}
	mmGet.t.Fatalf("Unexpected call to UserCacheServiceMock.Get. %v %v", ctx, ID)
	return
}

// GetAfterCounter returns a count of finished UserCacheServiceMock.Get invocations
func (mmGet *UserCacheServiceMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of UserCacheServiceMock.Get invocations
func (mmGet *UserCacheServiceMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to UserCacheServiceMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mUserCacheServiceMockGet) Calls() []*UserCacheServiceMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*UserCacheServiceMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *UserCacheServiceMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *UserCacheServiceMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheServiceMock.Get with params: %#v", *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheServiceMock.Get")
		} else {
			m.t.Errorf("Expected call to UserCacheServiceMock.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Error("Expected call to UserCacheServiceMock.Get")
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheServiceMock.Get but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), afterGetCounter)
	}
}

type mUserCacheServiceMockSet struct {
	optional           bool
	mock               *UserCacheServiceMock
	defaultExpectation *UserCacheServiceMockSetExpectation
	expectations       []*UserCacheServiceMockSetExpectation

	callArgs []*UserCacheServiceMockSetParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// UserCacheServiceMockSetExpectation specifies expectation struct of the UserCacheService.Set
type UserCacheServiceMockSetExpectation struct {
	mock      *UserCacheServiceMock
	params    *UserCacheServiceMockSetParams
	paramPtrs *UserCacheServiceMockSetParamPtrs
	results   *UserCacheServiceMockSetResults
	Counter   uint64
}

// UserCacheServiceMockSetParams contains parameters of the UserCacheService.Set
type UserCacheServiceMockSetParams struct {
	ctx  context.Context
	user *model.User
}

// UserCacheServiceMockSetParamPtrs contains pointers to parameters of the UserCacheService.Set
type UserCacheServiceMockSetParamPtrs struct {
	ctx  *context.Context
	user **model.User
}

// UserCacheServiceMockSetResults contains results of the UserCacheService.Set
type UserCacheServiceMockSetResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSet *mUserCacheServiceMockSet) Optional() *mUserCacheServiceMockSet {
	mmSet.optional = true
	return mmSet
}

// Expect sets up expected params for UserCacheService.Set
func (mmSet *mUserCacheServiceMockSet) Expect(ctx context.Context, user *model.User) *mUserCacheServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.paramPtrs != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by ExpectParams functions")
	}

	mmSet.defaultExpectation.params = &UserCacheServiceMockSetParams{ctx, user}
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// ExpectCtxParam1 sets up expected param ctx for UserCacheService.Set
func (mmSet *mUserCacheServiceMockSet) ExpectCtxParam1(ctx context.Context) *mUserCacheServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &UserCacheServiceMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.ctx = &ctx

	return mmSet
}

// ExpectUserParam2 sets up expected param user for UserCacheService.Set
func (mmSet *mUserCacheServiceMockSet) ExpectUserParam2(user *model.User) *mUserCacheServiceMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheServiceMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &UserCacheServiceMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.user = &user

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the UserCacheService.Set
func (mmSet *mUserCacheServiceMockSet) Inspect(f func(ctx context.Context, user *model.User)) *mUserCacheServiceMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for UserCacheServiceMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by UserCacheService.Set
func (mmSet *mUserCacheServiceMockSet) Return(err error) *UserCacheServiceMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &UserCacheServiceMockSetExpectation{mock: mmSet.mock}
	}
	mmSet.defaultExpectation.results = &UserCacheServiceMockSetResults{err}
	return mmSet.mock
}

// Set uses given function f to mock the UserCacheService.Set method
func (mmSet *mUserCacheServiceMockSet) Set(f func(ctx context.Context, user *model.User) (err error)) *UserCacheServiceMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the UserCacheService.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the UserCacheService.Set method")
	}

	mmSet.mock.funcSet = f
	return mmSet.mock
}

// When sets expectation for the UserCacheService.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mUserCacheServiceMockSet) When(ctx context.Context, user *model.User) *UserCacheServiceMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("UserCacheServiceMock.Set mock is already set by Set")
	}

	expectation := &UserCacheServiceMockSetExpectation{
		mock:   mmSet.mock,
		params: &UserCacheServiceMockSetParams{ctx, user},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up UserCacheService.Set return parameters for the expectation previously defined by the When method
func (e *UserCacheServiceMockSetExpectation) Then(err error) *UserCacheServiceMock {
	e.results = &UserCacheServiceMockSetResults{err}
	return e.mock
}

// Times sets number of times UserCacheService.Set should be invoked
func (mmSet *mUserCacheServiceMockSet) Times(n uint64) *mUserCacheServiceMockSet {
	if n == 0 {
		mmSet.mock.t.Fatalf("Times of UserCacheServiceMock.Set mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSet.expectedInvocations, n)
	return mmSet
}

func (mmSet *mUserCacheServiceMockSet) invocationsDone() bool {
	if len(mmSet.expectations) == 0 && mmSet.defaultExpectation == nil && mmSet.mock.funcSet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSet.mock.afterSetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Set implements service.UserCacheService
func (mmSet *UserCacheServiceMock) Set(ctx context.Context, user *model.User) (err error) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(ctx, user)
	}

	mm_params := UserCacheServiceMockSetParams{ctx, user}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, &mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_want_ptrs := mmSet.SetMock.defaultExpectation.paramPtrs

		mm_got := UserCacheServiceMockSetParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSet.t.Errorf("UserCacheServiceMock.Set got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmSet.t.Errorf("UserCacheServiceMock.Set got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("UserCacheServiceMock.Set got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSet.SetMock.defaultExpectation.results
		if mm_results == nil {
			mmSet.t.Fatal("No results are set for the UserCacheServiceMock.Set")
		}
		return (*mm_results).err
	}
	if mmSet.funcSet != nil {
		return mmSet.funcSet(ctx, user)
	}
	mmSet.t.Fatalf("Unexpected call to UserCacheServiceMock.Set. %v %v", ctx, user)
	return
}

// SetAfterCounter returns a count of finished UserCacheServiceMock.Set invocations
func (mmSet *UserCacheServiceMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of UserCacheServiceMock.Set invocations
func (mmSet *UserCacheServiceMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to UserCacheServiceMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mUserCacheServiceMockSet) Calls() []*UserCacheServiceMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*UserCacheServiceMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *UserCacheServiceMock) MinimockSetDone() bool {
	if m.SetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetMock.invocationsDone()
}

// MinimockSetInspect logs each unmet expectation
func (m *UserCacheServiceMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to UserCacheServiceMock.Set with params: %#v", *e.params)
		}
	}

	afterSetCounter := mm_atomic.LoadUint64(&m.afterSetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && afterSetCounter < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to UserCacheServiceMock.Set")
		} else {
			m.t.Errorf("Expected call to UserCacheServiceMock.Set with params: %#v", *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && afterSetCounter < 1 {
		m.t.Error("Expected call to UserCacheServiceMock.Set")
	}

	if !m.SetMock.invocationsDone() && afterSetCounter > 0 {
		m.t.Errorf("Expected %d calls to UserCacheServiceMock.Set but found %d calls",
			mm_atomic.LoadUint64(&m.SetMock.expectedInvocations), afterSetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *UserCacheServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockSetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *UserCacheServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *UserCacheServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockSetDone()
}
